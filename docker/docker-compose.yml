services:
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        PYTHON_VERSION: "3.10"
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    ports:
      - "5000:5000"
    volumes:
      - ../:/app
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - FLASK_APP=backend/run_pipeline.py
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PIP_NO_CACHE_DIR=off
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - db

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-appuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: ${DB_NAME:-cosmology}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-appuser} -d ${DB_NAME:-cosmology}"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local